{"version":3,"file":"static/js/27.a8d1d9f5.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Conteiner/Conteiner.styled.jsx","components/Conteiner/Conteiner.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const FormWrap = styled(Form)`\n  display: flex;\n  gap: 24px;\n  flex-direction: column;\n  border: 1px solid black;\n  border-radius: 6px;\n  width: 300px;\n  padding: 16px;\n  margin-top: 8px;\n  margin-bottom: 16px;\n`;\n\nexport const FormField = styled(Field)`\n  font-size: 18px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  padding: 8px 12px;\n  background-color: transparent;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  gap: 8px;\n  font-weight: 700;\n  font-size: 22px;\n  flex-direction: column;\n`;\n\nexport const FormButton = styled.button`\n  cursor: pointer;\n  width: fit-content;\n  position: relative;\n  display: inline-block;\n  padding: 10px 30px;\n  margin-right: 20px;\n  text-decoration: none;\n  font-size: 20px;\n  line-height: 1;\n  letter-spacing: 3px;\n  color: #e8eff1;\n  text-shadow: -2px -1px #f17555;\n  background: #1e1958;\n  transition: 0.3s;\n  &:hover {\n    text-shadow: none;\n  }\n`;\n\nexport const ErrorMsg = styled.div`\n  font-size: 14px;\n  background-color: rgb(255, 245, 245);\n  color: rgb(120, 27, 0);\n  padding: 0.5rem 0.75rem;\n  white-space: pre-line;\n  border-radius: 4px;\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport {\n  FormWrap,\n  FormField,\n  FormLabel,\n  FormButton,\n  ErrorMsg,\n} from './ContactForm.styled';\n\nfunction validateName(name) {\n  let error;\n  if (!name) {\n    error = 'Enter name!';\n  } else if (\n    !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(name)\n  ) {\n    error =\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n  }\n  return error;\n}\n\nfunction validateNumber(number) {\n  let error;\n  if (!number) {\n    error = 'Enter telephone number!';\n  } else if (\n    !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(\n      number\n    )\n  ) {\n    error =\n      'Phone number must be more then 5 digits and can contain spaces, dashes, parentheses and can start with +';\n  }\n  return error;\n}\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const allContacts = contacts.map(contact =>\n      contact.name.toLocaleLowerCase()\n    );\n    const newContact = values.name.toLocaleLowerCase();\n\n    if (allContacts.includes(newContact)) {\n      alert(`${values.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(values));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <FormWrap autoComplete=\"off\">\n          <FormLabel>\n            Name\n            <FormField\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              validate={validateName}\n            />\n            {errors.name && touched.name && <ErrorMsg>{errors.name}</ErrorMsg>}\n          </FormLabel>\n          <FormLabel>\n            Number\n            <FormField\n              id=\"number\"\n              name=\"number\"\n              type=\"tel\"\n              validate={validateNumber}\n            />\n            {errors.number && touched.number && (\n              <ErrorMsg>{errors.number}</ErrorMsg>\n            )}\n          </FormLabel>\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </FormWrap>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const ContactBtn = styled.button`\n  cursor: pointer;\n  width: fit-content;\n  padding: 4px 8px;\n  background-color: #fff;\n  font-size: 12px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\n    0px 2px 1px rgb(0 0 0 / 20%);\n  transition: 250ms;\n  &:hover,\n  :focus {\n    background-color: #1e1958;\n    color: #fff;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ContactWrap, ContactBtn } from './Contact.styled';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ contact }) => {\n  const { name, number, id } = contact;\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactWrap>\n      <p>{name}:</p>\n      <p>{number} </p>\n      <ContactBtn type=\"button\" onClick={handleDelete}>\n        Delete\n      </ContactBtn>\n    </ContactWrap>\n  );\n};\n\nContact.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const ContactsWrap = styled.div`\n  width: 360px;\n`;\nexport const ContactSection = styled.ul`\n  list-style: circle;\n  margin: 0;\n`;\n\nexport const ContactItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { Contact } from '../Contact/Contact';\nimport { ContactSection, ContactItem } from './ContactList.styled';\nimport { getFilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  return (\n    <ContactSection>\n      {filteredContacts.map(contact => {\n        return (\n          <ContactItem key={contact.id}>\n            <Contact contact={contact} />\n          </ContactItem>\n        );\n      })}\n    </ContactSection>\n  );\n};\n","import { Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  padding: 16px;\n`;\n\nexport const Title = styled.p`\n  margin: 0;\n  margin-bottom: 8px;\n`;\n\nexport const FilterInput = styled(Field)`\n  width: 100%;\n  font-size: 18px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  padding: 8px 12px;\n  background-color: transparent;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport { FilterInput, Title, FilterWrap } from './Filter.styled';\nimport { setFilterValue } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n\n  return (\n    <FilterWrap>\n      <Title>Find contact by name</Title>\n      <Formik>\n        <FilterInput\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onChangeFilter}\n          autoComplete=\"off\"\n        ></FilterInput>\n      </Formik>\n    </FilterWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ConteinerStyled = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n","import { ConteinerStyled } from './Conteiner.styled';\n\nexport const Conteiner = ({ children }) => {\n  return <ConteinerStyled>{children}</ConteinerStyled>;\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { ContactsWrap } from '../../components/ContactList/ContactList.styled';\nimport { Filter } from '../../components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading, getError, getContacts } from 'redux/contacts/selectors';\nimport { Conteiner } from 'components/Conteiner/Conteiner';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const contacts = useSelector(getContacts);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Conteiner>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <ContactsWrap>\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && !error && <b>Request in progress...</b>}\n        {error && <b>{error}</b>}\n        {contacts && !isLoading && <ContactList />}\n      </ContactsWrap>\n    </Conteiner>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FormWrap","styled","Form","FormField","Field","FormLabel","FormButton","ErrorMsg","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","getFilteredContacts","normalizedFilter","toLowerCase","contact","includes","validateName","test","validateNumber","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","onSubmit","values","actions","allContacts","toLocaleLowerCase","newContact","alert","addContact","resetForm","errors","touched","autoComplete","id","type","validate","ContactWrap","ContactBtn","Contact","onClick","deleteContact","ContactsWrap","ContactSection","ContactItem","ContactList","filteredContacts","FilterWrap","Title","FilterInput","Filter","onChange","e","setFilterValue","target","ConteinerStyled","Conteiner","children","useEffect","fetchContacts"],"sourceRoot":""}